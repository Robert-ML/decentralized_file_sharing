/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Algo2ProxyReencryptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "get_file_share_result"
      | "get_files_pending_ids_of_user"
      | "get_pending_share_requests"
      | "get_request_id_result"
      | "get_user_files_pending_upload"
      | "get_users_pending_uploads"
      | "request_file_share"
      | "request_file_upload_info"
      | "respond_with_file_id"
      | "respond_with_re_encryption_key"
      | "upload_file"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "get_file_share_result",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_files_pending_ids_of_user",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_pending_share_requests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_request_id_result",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_user_files_pending_upload",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_users_pending_uploads",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "request_file_share",
    values: [AddressLike, BigNumberish[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "request_file_upload_info",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond_with_file_id",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "respond_with_re_encryption_key",
    values: [AddressLike, BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "upload_file",
    values: [AddressLike, BigNumberish, string, string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "get_file_share_result",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_files_pending_ids_of_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_pending_share_requests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_request_id_result",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_user_files_pending_upload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_users_pending_uploads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "request_file_share",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "request_file_upload_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respond_with_file_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respond_with_re_encryption_key",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upload_file",
    data: BytesLike
  ): Result;
}

export interface Algo2ProxyReencryption extends BaseContract {
  connect(runner?: ContractRunner | null): Algo2ProxyReencryption;
  waitForDeployment(): Promise<this>;

  interface: Algo2ProxyReencryptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  get_file_share_result: TypedContractMethod<
    [client: AddressLike, file_id: BigNumberish],
    [[boolean, [bigint, bigint]] & { re_enc_key: [bigint, bigint] }],
    "view"
  >;

  get_files_pending_ids_of_user: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  get_pending_share_requests: TypedContractMethod<
    [],
    [[string[], string[], bigint[], bigint[]]],
    "view"
  >;

  get_request_id_result: TypedContractMethod<
    [user: AddressLike, request_id: BigNumberish],
    [bigint[]],
    "view"
  >;

  get_user_files_pending_upload: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  get_users_pending_uploads: TypedContractMethod<[], [string[]], "view">;

  request_file_share: TypedContractMethod<
    [
      client: AddressLike,
      client_prenc_pk: BigNumberish[],
      file_owner: AddressLike,
      file_id: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  request_file_upload_info: TypedContractMethod<
    [user: AddressLike, request_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  respond_with_file_id: TypedContractMethod<
    [
      request_id: BigNumberish,
      generated_file_id: BigNumberish,
      user: AddressLike,
      pp_g: BigNumberish[],
      pp_g1: BigNumberish[],
      pp_h: BigNumberish[],
      pp_u_v_d: BigNumberish[],
      prenc_public_key_pk: BigNumberish[],
      prenc_secret_encrypted: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  respond_with_re_encryption_key: TypedContractMethod<
    [
      client: AddressLike,
      file_id: BigNumberish,
      re_enc_key: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  upload_file: TypedContractMethod<
    [
      user: AddressLike,
      file_id: BigNumberish,
      file_info: string,
      file_address: string,
      cyphertext: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "get_file_share_result"
  ): TypedContractMethod<
    [client: AddressLike, file_id: BigNumberish],
    [[boolean, [bigint, bigint]] & { re_enc_key: [bigint, bigint] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_files_pending_ids_of_user"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "get_pending_share_requests"
  ): TypedContractMethod<
    [],
    [[string[], string[], bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_request_id_result"
  ): TypedContractMethod<
    [user: AddressLike, request_id: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_user_files_pending_upload"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "get_users_pending_uploads"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "request_file_share"
  ): TypedContractMethod<
    [
      client: AddressLike,
      client_prenc_pk: BigNumberish[],
      file_owner: AddressLike,
      file_id: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "request_file_upload_info"
  ): TypedContractMethod<
    [user: AddressLike, request_id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "respond_with_file_id"
  ): TypedContractMethod<
    [
      request_id: BigNumberish,
      generated_file_id: BigNumberish,
      user: AddressLike,
      pp_g: BigNumberish[],
      pp_g1: BigNumberish[],
      pp_h: BigNumberish[],
      pp_u_v_d: BigNumberish[],
      prenc_public_key_pk: BigNumberish[],
      prenc_secret_encrypted: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "respond_with_re_encryption_key"
  ): TypedContractMethod<
    [
      client: AddressLike,
      file_id: BigNumberish,
      re_enc_key: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upload_file"
  ): TypedContractMethod<
    [
      user: AddressLike,
      file_id: BigNumberish,
      file_info: string,
      file_address: string,
      cyphertext: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
